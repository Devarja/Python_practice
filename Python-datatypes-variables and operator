1)Datatypes and variables in python
Ans - 
int: Integer (e.g., 5, -10)
float: Floating-point number (e.g., 3.14, -0.001)
str: String (e.g., "hello", 'Python')
bool: Boolean (e.g., True, False)
list: Ordered, mutable collection (e.g., [1, 2, 3])
tuple: Ordered, immutable collection (e.g., (1, 2, 3))
dict: Key-value pair collection (e.g., {"name": "Alice", "age": 25})
set: Unordered collection of unique elements (e.g., {1, 2, 3})
NoneType: Represents the absence of a value (None)

variables - A variable holds data that can be used and manipulated throughout the program.
example -
# Defining variables
x = 10          # Integer
name = "Alice"  # String
pi = 3.14       # Float
is_active = True  

2)Global and Local Variables in python
a)Global Variable - 
A global variable is a variable that is defined outside of all functions and can be accessed by any function within the program. 
It has a global scope, meaning it is available throughout the entire code, unless shadowed by a local variable with the same name.
ex- # Global variable
message = "Hello, World!"

def greet():
    # Accessing global variable inside a function
    print(message)

def change_message():
    global message
    # Modifying global variable inside a function
    message = "Hello, Python!"

greet()  # Output: Hello, World!
change_message()
greet()  # Output: Hello, Python!

b)Local variable - 
A local variable is a variable that is defined within a function and can only be accessed inside that function. 
It has a local scope, meaning it is limited to the block of code in which it is declared.
ex-def my_function():
    # Local variable
    x = 10
    print("Inside the function:", x)

my_function()  # Output: Inside the function: 10

# Trying to access the local variable outside the function
print(x)  # This will raise an error: NameError: name 'x' is not defined

2)Operaters in python 
ans - 
1. Arithmetic Operators:
+ : Addition
- : Subtraction
* : Multiplication
/ : Division
% : Modulus (remainder)
** : Exponentiation (power)
// : Floor Division (quotient without remainder)

2. Comparison (Relational) Operators:
== : Equal to
!= : Not equal to
> : Greater than
< : Less than
>= : Greater than or equal to
<= : Less than or equal to

3. Logical Operators:
and : Logical AND
or : Logical OR
not : Logical NOT

4. Assignment Operators:
= : Assign
+= : Add and assign
-= : Subtract and assign
*= : Multiply and assign
/= : Divide and assign
%= : Modulus and assign
**= : Exponent and assign
//= : Floor division and assign

5. Bitwise Operators:
& : Bitwise AND
| : Bitwise OR
^ : Bitwise XOR
~ : Bitwise NOT
<< : Left shift
>> : Right shift

6. Membership Operators:
in : Returns True if a value is found in a sequence
not in : Returns True if a value is not found in a sequence

7. Identity Operators:
is : Returns True if two variables are the same object
is not : Returns True if two variables are not the same object

3)command line arguments
In Python, command line arguments are the values provided to a script when it is executed from the command line. 
These arguments can be accessed using the sys module or the argparse module. Hereâ€™s how you can use both methods:

1. Using the sys Module:
The sys module allows you to access command line arguments via the sys.argv list, where:

sys.argv[0] is the name of the script.
sys.argv[1] onward are the arguments passed 

4)output statements
ans - print() is the output statement used in python





















