OPPS(OBJECT ORIENTED PROGRAMING LANGUAGE):
def - It is is a concept where we can solve the realword problems using the main features of opps called 
code reusability.

1)The main features of opps
i)class
ii)object
iii)Inheritence
iv)Polymorphism
v)Abstraction
vi)Encapusaltion

i)Class
ans - It is a bluprint of an object

class can be defined with its kewyword "class" followed by class name and colon
sytanx:
 class A:
   pass

ii)object
object is copy of a class and it has both state and Behaviour.
state - state is attibutes of a class
Behaviour - It is methods of class
identity - each object has its unique name

ex - class A:
        pass
     x = A()
     so here x is object 

3)Inheritence
def - Its process of deriving the parent class properties to child class.
Benifits of it - 
i) It represents real-world relationships well.
ii) It provides the reusability of a code. We donâ€™t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.
iii) It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A.

Types of Inheritance
i)Single Inheritance : Single-level inheritance enables a derived class to inherit characteristics from a single-parent class.
ex - class A: # parent class
       def __init__(self):
          self.name="dev"
       def speak(self):
          print("im A")
    class B(A):# derived class or child class
       def __init__(self):
          self.name="dev"
       def run(self):
        print("i will run")
       
ii) Multilevel Inheritance: Multi-level inheritance enables a derived class to inherit properties from an immediate parent class which in turn inherits properties from his parent class. 
ex - class A: # parent class
       def __init__(self):
          self.name="dev"
       def speak(self):
          print("im A")
    class B(A):# derived class or child class
       def __init__(self):
          self.name="dev"
       def run(self):
        print("i will run")
    class C(B):
        def __init__(self):
            self.name="C"
        def read(self):
            print("read me Like C")

iii) Hierarchical Inheritance: Hierarchical-level inheritance enables more than one derived class to inherit properties from a parent class.
urn inherits properties from his parent class. 
ex - class A: # parent class
       def __init__(self):
          self.name="dev"
       def speak(self):
          print("im A")
    class B(A):# derived class or child class
       def __init__(self):
          self.name="dev"
       def run(self):
        print("i will run")
    class C(A):
        def __init__(self):
            self.name="C"
        def read(self):
            print("read me Like C")

iv) Multiple Inheritance: Multiple-level inheritance enables one derived class to inherit properties from more than one base class.
urn inherits properties from his parent class. 
ex - class A: # parent class
       def __init__(self):
          self.name="dev"
       def speak(self):
          print("im A")
    class B():# Imediate parent class to C
       def __init__(self):
          self.name="dev"
       def run(self):
        print("i will run")
    class C(A,B):
        def __init__(self):
            self.name="C"
        def read(self):
            print("read me Like C")
Super() method is used to inherit the properties from paretn class to child class

4)polymorphism 
ans - Having many forms
 it is dvidied into two types

method-overiding
ans - The process of re-implementing a method in the child class is known as Method Overriding.  

i) polymorphism with functions
def add(a=0,b=2,,c=1)
    print(a+b+c)
add(a=10,b=6)
add(a=12,b=33,c=10) # same method name and passing diffrent number of parameters

ii) polymorphism with class methods
class A:
    def speak(self):
        print("im A)
    def read(self):
        print("call me A")
class B:
    def sepak(self):
        print("im B")
    def read(self):
        print("call me B")
iii)polymorpism with inheritence
    #here we can expet overidding the methods
    class A:
        def __init__(self):
            self.name="devaraja"
        def read(self):
            print("read me as A")
    class B(A):
        def __init__(Self):
            self.name="kl"
        def read(self):
            print("call me as B")
    b=B()
    b.read()
    # so the output will be like "call me as B" will be the output
    #because read method in the child class as overdien the read method in the parent class

iv) Data Abstarction
def -  The process of hiding the irrelevent data to the user
Abstract class must and should have the abstarct method where abstarct method doesn't need any implementation 
in baseclass.To create abstract class and abstract method we need to import the "ABC" and "abstarctmethod" class from abc(abstarct base class).
***imp*** - If we do not implement the abstract methods of base class in the child class then our code will give error.
***imp*** - In Python, when a class inherits from ABC, it indicates that the class is intended to be an abstract base class.

one terminoly we use in abstract class is concrect method it is the method has code implementaion in
baseclass.
ex - To create a abstarct class We need to follow these steps
i) we need to import the abstractmethod class and ABC class from abc library
ii) Then create a baseclass and which should inherit the ABC class
iii)Abstact class msut and should have the abstract method it can be identified by the decorater abstractmethod 

code 
from abc import ABC,abstractmethod
class Car(ABC):
    def __init__(self,brand,model,year):
        self.brand=brand
        self.model=model
        self.year=year
    @abstractmethod
    def printdetails(self):
        pass
    #concrete method
    def move(self):
        print("I move's very fast")
class SUV(Car):
    def printdetails(self):
        print("Brand : {}".format(self.brand))
        print("Model : {}".format(self.model))
        print("Year : {}".format(self.brand))
    def accelerate(self):
        print("speed up bro")
class Hatchback(Car):
    def printdetails(self):
        print("Brand : {}".format(self.brand))
        print("Model : {}".format(self.model))
        print("Year : {}".format(self.brand))
    def apllybreak(self):
        print("apply break when needed")

vi) Encapsulation
def - Wrapping the data and the method which is using that data within the unit is called an encapuslation.
it denies acssing to particular varibales to accidentally.

protected member - here the variable can be accesed inside the class and its child class and also outside the class.
The convention for this protected member is giving one _ to a variable like(_a).
ex- # Python program to
# demonstrate protected members

# Creating a base class
class Base:
    def __init__(self):

        # Protected member
        self._a = 2

# Creating a derived class
class Derived(Base):
    def __init__(self):

        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling protected member of base class: ", 
              self._a)

        # Modify the protected variable:
        self._a = 3
        print("Calling modified protected member outside class: ",
              self._a)


obj1 = Derived()

obj2 = Base()

# Calling protected member
# Can be accessed but should not be done due to convention
print("Accessing protected member of obj1: ", obj1._a)

# Accessing the protected variable outside
print("Accessing protected member of obj2: ", obj2._a)

2.private member - here the variable can be accesed inside the class and its child class but not outside the class.
The convention for this protected member is giving one __ to a variable like(__a).
ex -
# Python program to
# demonstrate private members

# Creating a Base class


class Base:
    def __init__(self):
        self.a = "GeeksforGeeks"
        self.__c = "GeeksforGeeks"

# Creating a derived class
class Derived(Base):
    def __init__(self):

        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling private member of base class: ")
        print(self.__c)


# Driver code
obj1 = Base()
print(obj1.a)

# Uncommenting print(obj1.c) will
# raise an AttributeError

# Uncommenting obj2 = Derived() will
# also raise an AttributeError as
# private member of base class
# is called inside derived class


